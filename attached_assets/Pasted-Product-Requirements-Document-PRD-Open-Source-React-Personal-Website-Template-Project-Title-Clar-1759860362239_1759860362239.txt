Product Requirements Document (PRD): Open-Source React Personal Website Template
Project Title: Clarity Portfolio Template
Target Audience: Developers, designers, and professionals looking for a modern, simple, and easily customizable portfolio template.
Goal: Create a high-quality, open-source personal website template built exclusively with React and styled using shadcn/ui. The template must be 100% front-end (no backend or database required) and ready for static deployment (e.g., GitHub Pages, Vercel).

I. Technical Specifications & Constraints
Stack: React (Functional Components & Hooks), TypeScript (if possible, otherwise JS/JSX is acceptable), Tailwind CSS (used exclusively via shadcn/ui).

UI Library: MUST use shadcn/ui components for all UI elements (Buttons, Cards, Badges, Navigation).

Architecture: Single Page Application (SPA) / Frontend Only.

NO Backend: No Firebase, Supabase, or any other database/authentication/server logic.

Data Source: All content (name, bio, projects, contact info) MUST be defined in a dedicated configuration file (e.g., src/config/portfolioData.js) and imported by the relevant components to ensure content is easily separated from the code.

Routing: Use smooth scrolling and anchor links for navigation. NO third-party routing libraries (e.g., React Router DOM) are allowed, enforcing a single-page experience.

II. Modularity and Customization Requirements (Critical for Open Source)
To ensure the template is easily forkable, maintainable, and highly customizable by the end-user, the following structural mandates must be strictly followed:

1. Theme and Style Customization
CSS Variables for Theming: The entire color scheme (including primary, secondary, background, and card colors) MUST be controlled by CSS variables defined in the global CSS file (e.g., src/app/globals.css). The agent must use hsl values for these variables.

Tailwind Configuration: The tailwind.config.js file must be configured to reference these CSS variables (e.g., theme.extend.colors.primary: 'hsl(var(--primary))'). This allows the user to change the entire site theme by modifying just a few HSL values in the CSS file.

2. Component and Structure Ownership
shadcn/ui Directory: A dedicated directory (e.g., src/components/ui/) is required to house the copied, basic, underlying shadcn components (Button, Card, Badge, etc.). This follows the standard shadcn usage pattern.

Section Components: All major visual sections (Hero, About, Projects, Contact) MUST be independent components located in a separate directory (e.g., src/components/sections/). This ensures easy addition, removal, or reordering of sections in App.jsx.

3. Content Decoupling
Dedicated Data File: Reiterate that content must be fully decoupled. All text strings, links, project arrays, and contact details must reside in a single configuration object exported from a file like src/config/portfolioData.js.

4. Component Exclusivity
SHADCN ONLY: The project must EXCLUSIVELY USE shadcn components. The AI agent must not create custom components that simply wrap or replicate existing shadcn primitives; instead, it should use composition and styling (via Tailwind classes) directly on the imported shadcn components.

III. Required Features & Components
The application must utilize a modular, component-based file structure for maintainability and ease of use. Components should be organized logically, with sections defined as separate components.

1. Global Layout & Utilities
Dark Mode Toggle: A persistent and functional toggle (using Toggle component from shadcn/ui) located in the header for switching between light and dark themes.

Responsiveness: Must be fully responsive and optimized for mobile-first viewing, using Tailwind's responsive prefixes (sm:, md:, lg:).

Font: Use a professional, minimalist font (e.g., Inter or similar sans-serif).

Component: Use the standard shadcn/ui use-theme hook/logic pattern for managing the theme state.

2. Header / Navigation (<Header />)
Structure: Sticky header that remains visible on scroll.

Content:

Site Logo/Name (e.g., "J.D." or "Portfolio").

Navigation Links: Must be anchor links (#) to the main sections (Hero, About, Projects, Contact).

Dark Mode Toggle (right aligned).

Required shadcn Components: Button (for navigation and logo/name container), Toggle (for dark mode switch), and Sheet (must be used to create a responsive, off-canvas navigation menu for mobile viewports).

3. Hero Section (<Hero />)
Purpose: The main landing point.

Content:

Large, centered Name and Professional Title (e.g., "Full-Stack Developer").

A short, compelling one-line pitch/summary.

Primary Call-to-Action (CTA) button (e.g., "View My Work" - links to the Projects section).

Social icons (using Button with icon-only variants) for GitHub, LinkedIn, and Email.

Required shadcn Components: Button (for CTA and social icons), Separator (for aesthetic division or emphasis).

4. About Section (<About />)
Purpose: Detail skills and professional background.

Content:

A clean two-column layout on desktop (stacked on mobile).

Column 1 (Text): 2-3 paragraphs of mock professional biography.

Column 2 (Skills): A list of core skills/technologies.

Required shadcn Components: Badge (exclusively for displaying all skills/technologies).

5. Projects Section (<Projects />)
Purpose: Showcase key work items.

Content:

A grid of 3-4 professional project cards.

Card Design: Each project must use the shadcn Card component.

Mock Content:

Project Title (H3).

Short Description.

Technologies Used (small, subtle shadcn Badge components).

Links: Button for "Live Demo" and Button for "Source Code" (GitHub).

Required shadcn Components: Card (as the primary project container), Button (for all links), Badge (for technologies used).

6. Contact Section (<Contact /> / Footer)
Purpose: Provide contact details and social links.

Content:

A clear call to action (e.g., "Let's build something great together.").

Primary Email Link (plain text or large button).

Final Footer bar containing copyright information and repeating the social media icons.

Required shadcn Components: Button (for CTA email link and social icons).

IV. Deliverables & Acceptance Criteria
A complete, runnable React project utilizing a clear, modular component structure as described in Section II.

The application must visually embody a modern, simple, and highly professional aestheticâ€”think clean lines, generous white space, and clear hierarchy.

STRICTLY ENFORCED: All UI elements must be built EXCLUSIVELY using shadcn/ui components, or compositions of them.

The dark mode toggle must function without reliance on an external state management library (use useState in the main component).

All mock content must be present and well-formatted and sourced from the dedicated data file.